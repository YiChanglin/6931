{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "943cdf42-e931-4115-bd10-d46f784076a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from bitcoin import SelectParams\n",
    "from bitcoin.wallet import CBitcoinSecret, P2PKHBitcoinAddress\n",
    "from bitcoin.core import lx, COIN, b2x\n",
    "from bitcoin.core.script import *\n",
    "from bitcoin.core.scripteval import VerifyScript, SCRIPT_VERIFY_P2SH\n",
    "from bitcoin.core.key import CPubKey\n",
    "from bitcoin.core import Hash160, COutPoint\n",
    "from bitcoin.wallet import CBitcoinAddress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "34011915-c767-4b8d-8879-22c242b38279",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Private Key: cV8zdJ1pjEyifAsWG462T4EJ29aCyBNVFkwn7m9g5UbNrgwznmtg\n",
      "Public Key: 027a1d0f6e54994afab98b141908e982ce1074f91cae08fc8a879f791c6e31ef1b\n",
      "Testnet Bitcoin Address: n1H9R6CwqrgkoLM1M1HEjQTEjEWmg4Ske1\n"
     ]
    }
   ],
   "source": [
    "# Initialize network parameters for testnet\n",
    "SelectParams('testnet')\n",
    "\n",
    "# Generate a 32-byte private key (cryptographically secure)\n",
    "private_key_bytes = os.urandom(32)  \n",
    "private_key = CBitcoinSecret.from_secret_bytes(private_key_bytes)\n",
    "print(f\"Private Key: {private_key}\")\n",
    "\n",
    "# Get the public key from the private key\n",
    "public_key = private_key.pub\n",
    "print(f\"Public Key: {b2x(public_key)}\")\n",
    "\n",
    "# Create the Bitcoin address from the public key (P2PKH)\n",
    "public_key_hash = Hash160(public_key)\n",
    "testnet_address = P2PKHBitcoinAddress.from_pubkey(public_key)\n",
    "print(f\"Testnet Bitcoin Address: {testnet_address}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a0156a3c-700a-4bf8-b262-49511fe6d3eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a transaction input (example UTXO)\n",
    "txid = lx(\"e3d0fcff07d2d8c09e19f042f4c8b4d6e5197f420fb5e9d6e2efed35cf7359f1\")  \n",
    "vout = 0  \n",
    "\n",
    "# Create the transaction output script (P2PKH script)\n",
    "recipient_private_key = CBitcoinSecret.from_secret_bytes(os.urandom(32))  \n",
    "recipient_public_key = recipient_private_key.pub\n",
    "recipient_address = P2PKHBitcoinAddress.from_pubkey(recipient_public_key) \n",
    "\n",
    "amount_to_send = 0.001 * COIN  \n",
    "\n",
    "txout_script = CScript([OP_DUP, OP_HASH160, recipient_address, OP_EQUALVERIFY, OP_CHECKSIG])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "003e2ce6-d58a-41f6-bef0-83e9d9f6ca4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the transaction\n",
    "from bitcoin.core import CMutableTxIn, CMutableTxOut, CMutableTransaction\n",
    "\n",
    "txin = CMutableTxIn(COutPoint(txid, vout))\n",
    "\n",
    "txout = CMutableTxOut(amount_to_send, txout_script)\n",
    "\n",
    "tx = CMutableTransaction([txin], [txout])\n",
    "\n",
    "# Sign the transaction\n",
    "txin_scriptPubKey = CScript([OP_DUP, OP_HASH160, public_key_hash, OP_EQUALVERIFY, OP_CHECKSIG])\n",
    "\n",
    "sighash = SignatureHash(txin_scriptPubKey, tx, 0, SIGHASH_ALL)\n",
    "signature = private_key.sign(sighash) + bytes([SIGHASH_ALL])\n",
    "\n",
    "txin.scriptSig = CScript([signature, public_key])\n",
    "VerifyScript(txin.scriptSig, txin_scriptPubKey, tx, 0, (SCRIPT_VERIFY_P2SH,))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1bddbcfb-91e3-4d0b-ba27-979d99fe4163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signed Transaction (hex): 0100000001f15973cf35edefe2d6e9b50f427f19e5d6b4c8f442f0199ec0d8d207fffcd0e3000000006a47304402205c816d4bbf743af987f3217ad2d43a1190cae6717c80986f53457e7f8536a88e02207920426a487361fb4c8144eb8cbddc266da8b185c90c9d17832cd287cbc07d3c0121027a1d0f6e54994afab98b141908e982ce1074f91cae08fc8a879f791c6e31ef1bffffffff01a0860100000000001976a9146c87c8d26d66ac3f23d70588e8d74c27c0a5409388ac00000000\n"
     ]
    }
   ],
   "source": [
    "# Print the signed transaction in hex format\n",
    "print(f\"Signed Transaction (hex): {b2x(tx.serialize())}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
